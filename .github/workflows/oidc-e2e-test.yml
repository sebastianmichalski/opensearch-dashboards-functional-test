name: Snapshot based E2E OIDC tests workflow
on:
  pull_request:
    branches: [ '**' ]
env:
  VERSION: '2.6.0'
  KEYCLOAK_VERSION: '21.0.1'
jobs:
  tests:
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Get and run Keycloak
        run: |
          echo "Downloading Keycloak ${{ env.KEYCLOAK_VERSION }}"
          wget https://github.com/keycloak/keycloak/releases/download/${{ env.KEYCLOAK_VERSION }}/keycloak-${{ env.KEYCLOAK_VERSION }}.tar.gz
          echo "Unpacking Keycloak"
          tar -xzf keycloak-${{ env.KEYCLOAK_VERSION }}.tar.gz
          export KEYCLOAK_ADMIN=admin
          export KEYCLOAK_ADMIN_PASSWORD=admin
          cd keycloak-${{ env.KEYCLOAK_VERSION }}/bin
          chmod +x kc.sh
          echo "Starting keycloak"
          ./kc.sh start-dev --http-enabled=true --hostname-strict-https=false --http-host=localhost --http-relative-path /auth --health-enabled=true &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/auth/health)" != "200" ]]; do sleep 5; done'
          chmod +x kcadm.sh
          echo "Creating client"
          ./kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin
          CID=$(./kcadm.sh create clients -r master -s clientId=opensearch -s 'redirectUris=["http://localhost:5603/auth/openid/login", "http://localhost:5601", "http://localhost:5601/auth/openid/login"]' -i)
          ./kcadm.sh get clients/$CID/installation/providers/keycloak-oidc-keycloak-json > tmp
          echo "Getting client secret for dashboards configuration purpose"
          echo "KEYCLOAK_CLIENT_SECRET=$(grep -o '"secret" : "[^"]*' tmp | grep -o '[^"]*$')" >> $GITHUB_ENV
          echo "Creating client mapper"
          ./kcadm.sh create clients/$CID/protocol-mappers/models  -r master -s 'config."id.token.claim"=true' -s 'config."multivalued"=true' -s 'config."claim.name"="roles"' -s 'config."userinfo.token.claim"=true' -s 'config."access.token.claim"=true' -s 'name=rolemapper' -s 'protocolMapper=oidc-usermodel-realm-role-mapper' -s "protocol=openid-connect"
      - name: Get and run OpenSearch
        run: |
          echo "Downloading OpenSearch ${{ env.VERSION }}"
          wget https://artifacts.opensearch.org/releases/bundle/opensearch/${{ env.VERSION }}/opensearch-${{ env.VERSION }}-linux-x64.tar.gz
          echo "Unpacking OpenSearch"
          tar -xzf opensearch-${{ env.VERSION }}-linux-x64.tar.gz
          cd opensearch-${{ env.VERSION }}
          echo "Injecting OICD configuration"
          cd config/opensearch-security/
          sed -i 's/authc:/authc:\n      openid_auth_domain:\n        http_enabled: true\n        transport_enabled: true\n        order: 0\n        http_authenticator:\n          type: openid\n          challenge: false\n          config:\n            subject_key: preferred_username\n            roles_key: roles\n            openid_connect_url: http:\/\/localhost:8080\/auth\/realms\/master\/.well-known\/openid-configuration\n        authentication_backend:\n          type: noop/g' config.yml
          echo "Installing demo configuration"
          cd ../../plugins/opensearch-security/tools
          chmod +x install_demo_configuration.sh
          ./install_demo_configuration.sh -y
          echo "Starting OpenSearch"
          ../../../bin/opensearch &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://localhost:9200 -ku admin:admin)" != "503" ]]; do sleep 5; done'
          echo "Setting up certificates"
          chmod +x securityadmin.sh
          ./securityadmin.sh -cd ../../../config/opensearch-security/ -icl -nhnv \
          -cacert ../../../config/root-ca.pem \
          -cert ../../../config/kirk.pem \
          -key ../../../config/kirk-key.pem
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://localhost:9200 -ku admin:admin)" != "200" ]]; do sleep 5; done'
      - name: Get and run OpenSearch-Dashboards
        run: |
          echo "Downloading OpenSearch-Dashboards ${{ env.VERSION }}"
          wget https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/${{ env.VERSION }}/opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
          echo "Unpacking OpenSearch-Dashboards"
          tar -xzf opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
          echo "Injecting OICD configuration"
          cd opensearch-dashboards-${{ env.VERSION }}/config
          echo "opensearch_security.openid.connect_url: \"http://localhost:8080/auth/realms/master/.well-known/openid-configuration\"" >> opensearch_dashboards.yml
          echo "opensearch_security.openid.client_id: \"opensearch\"" >> opensearch_dashboards.yml
          echo "opensearch_security.openid.client_secret: \"${{ env.KEYCLOAK_CLIENT_SECRET }}\"">> opensearch_dashboards.yml
          echo "opensearch_security.auth.type: [\"openid\"]" >> opensearch_dashboards.yml
          echo "opensearch_security.auth.multiple_auth_enabled: true" >> opensearch_dashboards.yml
          echo "opensearch_security.ui.openid.login.buttonname: \"OIDC\"" >> opensearch_dashboards.yml
          echo "Starting OpenSearch-Dashboards"
          cd ../bin
          chmod +x opensearch-dashboards
          ./opensearch-dashboards serve &
      - name: Checkout functional-test
        uses: actions/checkout@v2
        with:
          repository: ${{github.repository}}
          path: functional-test
      - name: Get Cypress version
        id: cypress_version
        run: |
          echo "::set-output name=cypress_version::$(cat ./functional-test/package.json | jq '.devDependencies.cypress' | tr -d '"')"
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
        env:
          CYPRESS_INSTALL_BINARY: ${{ steps.cypress_version.outputs.cypress_version }}
      - run: npx cypress cache list
      - run: npx cypress cache path
      - name: Yarn install
        uses: cypress-io/github-action@v2
        with:
          working-directory: functional-test
          command: yarn install
      - name: Cypress tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: functional-test
          command: yarn cypress:run-without-security --browser chromium --spec 'cypress/integration/plugins/security-dashboards-plugin/*.js'
          wait-on: 'http://localhost:5601'
      - name: Upload E2E test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: /home/runner/work/opensearch-dashboards-functional-test/opensearch-dashboards-functional-test/functional-test/cypress/reports/index.html
